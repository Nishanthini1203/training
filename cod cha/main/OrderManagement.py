import sys
import os

# Ensure the project root is in the Python path
project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))
sys.path.insert(0, project_root)  # ‚Üê insert instead of append, to take priority

# Imports

from dao.OrderProcessor import OrderProcessor
from entity_model.User import User
# In OrderProcessor.py and OrderManagement.py, import Electronics
from entity_model.Electronics import Electronics

from entity_model.Clothing import Clothing
def main():
    repo = OrderProcessor()

    while True:
        # Show the menu
        print("\nOrder Management System")
        print("1. Create User")
        print("2. Create Product")
        print("3. Cancel Order")
        print("4. Get All Products")
        print("5. Get Orders by User")
        print("6. Exit")
        choice = input("Enter your choice: ")

        if choice == "1":
            # Create user logic
            username = input("Enter username: ")
            password = input("Enter password: ")
            user_type = input("Enter user type (Admin/User): ")

            # Create User object (user_id is auto-generated by the database)
            user = User(username, password, user_type)
            
            try:
                # Create the user in the database
                repo.create_user(user)
                print(f"User {username} created successfully.")
            except Exception as e:
                print(f"Error while creating user: {e}")

        elif choice == "2":
            # Admin authentication
            admin_username = input("Enter admin username: ")
            admin_password = input("Enter admin password: ")

            # Prompt user for product details
            product_name = input("Enter product name: ")
            description = input("Enter product description: ")
            price = float(input("Enter product price: "))
            quantity_in_stock = int(input("Enter product quantity in stock: "))
            product_type = input("Enter product type (Electronics/Clothing): ")

            if product_type.lower() == "electronics":
                brand = input("Enter brand: ")
                warranty_period = int(input("Enter warranty period (months): "))
                
                # Create Electronics object without passing product_id
                product = Electronics(product_name, description, price, quantity_in_stock, product_type, brand, warranty_period)
                
                try:
                    # Create the product in the database
                    repo.create_product(admin_username, product)
                    print(f"Product {product_name} created successfully.")
                except Exception as e:
                    print(f"Error while creating product: {e}")
            else:
                print("Invalid product type. Only Electronics and Clothing are allowed.")

        elif choice == "3":
            try:
                # Example cancel order logic
                repo.cancel_order(1, 1)  # Cancel orderId 1 for userId 1
                print("Order cancelled.")
            except Exception as e:
                print(f"Error while cancelling order: {e}")

        elif choice == "4":
            try:
                products = repo.get_all_products()
                for p in products:
                    print(p)
            except Exception as e:
                print(f"Error while fetching products: {e}")

        elif choice == "5":
            user_id = int(input("Enter user ID to fetch orders: "))
            try:
                orders = repo.get_orders_by_user(user_id)
                for o in orders:
                    print(o)
            except Exception as e:
                print(f"Error while fetching orders: {e}")

        elif choice == "6":
            print("Exiting the system.")
            break

        else:
            print("Invalid choice. Please try again.")

if __name__ == "__main__":
    main()
